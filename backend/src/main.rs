// backend/src/main.rs - FÄ°NAL VERSÄ°YONU (Loglama EklenmiÅŸ)

// Gerekli tÃ¼m kÃ¼tÃ¼phanelerimizi ve modÃ¼llerimizi Ã§aÄŸÄ±rÄ±yoruz.
use actix_cors::Cors;
// Logger middleware'ini ve log kÃ¼tÃ¼phanesini import ediyoruz.
use actix_web::{App, HttpServer, middleware::Logger, web};
use sqlx::postgres::PgPoolOptions;
use std::env;

// Kendi oluÅŸturduÄŸumuz modÃ¼lleri projeye dahil ediyoruz.
pub mod db;
pub mod handlers;
mod models;

// Main fonksiyonumuz, tÃ¼m uygulamanÄ±n baÅŸlangÄ±Ã§ noktasÄ±.
#[actix_web::main]
async fn main() -> std::io::Result<()> {
    // .env dosyasÄ±nÄ± yÃ¼kleyerek ortam deÄŸiÅŸkenlerine eriÅŸim saÄŸlÄ±yoruz.
    dotenvy::dotenv().ok();

    // --- YENÄ° EKLENEN KISIM: Loglama sistemini baÅŸlatÄ±yoruz. ---
    // RUST_LOG ortam deÄŸiÅŸkenine gÃ¶re log seviyesini ayarlar.
    // EÄŸer deÄŸiÅŸken ayarlÄ± deÄŸilse, varsayÄ±lan olarak 'actix_web=info' seviyesinde log tutar.
    env_logger::init_from_env(env_logger::Env::new().default_filter_or("actix_web=info"));
    // --- YENÄ° EKLENEN KISIM SONU ---

    // DATABASE_URL'i ortamdan okuyoruz.
    let database_url = env::var("DATABASE_URL").expect("DATABASE_URL ortam deÄŸiÅŸkeni bulunamadÄ±.");

    // VeritabanÄ± baÄŸlantÄ± havuzunu (pool) oluÅŸturuyoruz.
    let pool = PgPoolOptions::new()
        .max_connections(5)
        .connect(&database_url)
        .await
        .expect("VeritabanÄ± baÄŸlantÄ±sÄ± baÅŸarÄ±sÄ±z oldu.");

    println!("ğŸš€ Sunucu http://127.0.0.1:8080 adresinde baÅŸlatÄ±lÄ±yor...");

    // HTTP sunucusunu kurup baÅŸlatÄ±yoruz.
    HttpServer::new(move || {
        let cors = Cors::default()
            .allowed_origin("http://localhost:3000")
            .allow_any_method()
            .allow_any_header()
            .max_age(3600);

        // Actix uygulamamÄ±zÄ± oluÅŸturuyoruz.
        App::new()
            .wrap(cors)
            // --- YENÄ° EKLENEN KISIM: Logger'Ä± bir middleware olarak ekliyoruz ---
            // %a: IP Adresi, %r: Ä°stek satÄ±rÄ±, %s: Cevap status kodu, %b: Cevap boyutu, %T: SÃ¼re
            .wrap(Logger::new(
                "%a \"%r\" %s %b \"%{Referer}i\" \"%{User-Agent}i\" %T s",
            ))
            // --- YENÄ° EKLENEN KISIM SONU ---
            .app_data(web::Data::new(pool.clone()))
            // Handler'larÄ±mÄ±zÄ± servis olarak kaydediyoruz.
            .service(handlers::create_santral_handler)
            .service(handlers::get_all_santraller_handler)
            .service(handlers::delete_santral_handler)
            .service(handlers::update_santral_handler)
            .service(handlers::get_santral_by_id_handler)
            .service(handlers::dengesizlik_hesapla_handler)
            .service(handlers::create_or_update_kgup_plan_handler)
    })
    .bind(("127.0.0.1", 8080))?
    .run()
    .await
}
