// Dosya: frontend/src/app/page.tsx
// D√úZELTME: `allFeatureCards` dizisi, t√ºm bile≈üenlerin eri≈üebilmesi i√ßin
// dosyanƒ±n en √ºst√ºne ta≈üƒ±ndƒ±.
'use client';

import { useEffect, useState } from "react";
import { useAuth } from "@/context/AuthContext";
import Link from "next/link";
import { useRouter } from "next/navigation";
import { getMusterilerForAdmin } from "@/services/adminApiService";
import type { Musteri } from "@/types/auth";

// --- √á√ñZ√úM: `allFeatureCards` dizisini buraya, dosyanƒ±n en √ºst√ºne ta≈üƒ±yoruz ---
const allFeatureCards = [
    { href: "/santraller", emoji: "üè≠", title: "Santralleri Y√∂net", description: "Yeni santral ekleyin, mevcut santralleri d√ºzenleyin veya portf√∂y√ºn√ºz√º g√∂r√ºnt√ºleyin.", roles: ['admin'] },
    { href: "/dashboard", emoji: "üìä", title: "Canlƒ± Dashboard", description: "T√ºm santrallerinizin anlƒ±k √ºretim verilerini ger√ßek zamanlƒ± olarak izleyin.", roles: ['admin', 'user'] },
    { href: "/raporlama", emoji: "üìÑ", title: "Tarihsel Raporlama", description: "Ge√ßmi≈üe d√∂n√ºk performans analizleri ve detaylƒ± sapma raporlarƒ± olu≈üturun.", roles: ['admin', 'user'] },
    { href: "/harita", emoji: "üó∫Ô∏è", title: "Operasyon Haritasƒ±", description: "Santrallerinizin coƒürafi konumlarƒ±nƒ± ve anlƒ±k durumlarƒ±nƒ± harita √ºzerinde g√∂r√ºn.", roles: ['admin', 'user'] },
    { href: "/kgup", emoji: "üìÖ", title: "KG√úP Planlama", description: "Santralleriniz i√ßin G√ºn √ñncesi √úretim/T√ºketim Programƒ± (KG√úP) olu≈üturun ve y√∂netin.", roles: ['admin', 'user'] },
    { href: "/analiz", emoji: "‚öñÔ∏è", title: "Dengesizlik Analizi", description: "Tekli veya toplu senaryolarla santrallerinizin potansiyel dengesizlik maliyetlerini sim√ºle edin.", roles: ['admin', 'user'] }
];

const FeatureCard = ({ href, title, description, emoji }: { href: string, title: string, description: string, emoji: string }) => (
    <Link href={href} className="block bg-component-dark border border-border-dark rounded-lg p-6 hover:border-brand-neon-green hover:scale-105 transition-all duration-300 group">
        <div className="text-4xl mb-4 transition-transform duration-300 group-hover:scale-110">{emoji}</div>
        <h3 className="text-xl font-bold text-text-light mb-2">{title}</h3>
        <p className="text-text-dark">{description}</p>
    </Link>
);

const AdminCustomerSelector = () => {
    const [musteriler, setMusteriler] = useState<Musteri[]>([]);
    const [loading, setLoading] = useState(true);
    const { session, startImpersonation } = useAuth();

    useEffect(() => {
        if (session) {
            getMusterilerForAdmin(session)
                .then(data => setMusteriler(data))
                .catch(err => console.error("M√º≈üteriler y√ºklenemedi", err))
                .finally(() => setLoading(false));
        }
    }, [session]);

    const handleSelectCustomer = (musteri: Musteri) => {
        startImpersonation(musteri.id);
    };

    if (loading) return <p>M√º≈üteriler y√ºkleniyor...</p>;

    return (
        <div>
            <h2 className="text-3xl font-bold text-text-light mb-6">M√º≈üteri Portf√∂y√º Se√ßin</h2>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                {musteriler.map(musteri => (
                    <button 
                        key={musteri.id}
                        onClick={() => handleSelectCustomer(musteri)}
                        className="block bg-component-dark border border-border-dark rounded-lg p-6 text-left hover:border-brand-neon-green hover:scale-105 transition-all duration-300"
                    >
                        <h3 className="text-xl font-bold text-text-light">{musteri.ad}</h3>
                        <p className="text-sm text-text-dark">ID: {musteri.id.slice(0,8)}...</p>
                    </button>
                ))}
            </div>
        </div>
    );
};

const UserDashboard = () => {
    const { session } = useAuth();
    const visibleCards = session 
        ? allFeatureCards.filter(card => card.roles.includes(session.rol))
        : [];
    
    return (
        <div>
            <div className="text-center mb-12">
                <h1 className="text-4xl sm:text-5xl font-bold text-text-light">Ho≈ü Geldiniz!</h1>
                <p className="mt-4 text-lg text-text-dark">L√ºtfen bir i≈ülem se√ßin.</p>
            </div>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
                {visibleCards.map(card => <FeatureCard key={card.href} {...card} />)}
            </div>
        </div>
    );
};


export default function HomePage() {
  const { session, loading, isImpersonating } = useAuth();
  const router = useRouter();

  useEffect(() => {
    if (!loading && !session) {
      router.push('/login');
    }
  }, [session, loading, router]);

  if (loading || !session) {
    return <div className="container mx-auto p-8 text-center">Y√ºkleniyor...</div>;
  }

  const isAdminRootView = session.rol === 'admin' && !isImpersonating;

  return (
    <main className="container mx-auto p-4 sm:p-8">
      {isAdminRootView ? <AdminCustomerSelector /> : <UserDashboard />}
    </main>
  );
}